AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Amazon Linux AMI.
  This example creates an EC2 security group for the instance to give you SSH access.
  Kinesis Agent is installed, configured and started to process logs data created for a python app.
   **WARNING** This template creates an Amazon EC2 instance.
  You will be billed for the AWS resources used if you create a stack
  from this template.'
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'
  DeliveryStreamName:
    Description: Delivery stream name
    Type: String
    Default: S3DeliveryStream
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref LnInstanceProfiler
      UserData: !Base64
        'Fn::Sub':
          - >
            #!/bin/bash -x

            # Install the files and packages from the metadata

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName}
            --resource EC2Instance
            --configsets InstallAndConfigure
            --region ${AWS::Region}

            # Signal the status from cfn-init

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource
            EC2Instance --region ${AWS::Region}
          - {}

    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndConfigure:
            - "enable_kinesis_agent"
            - "enable_log_generator"
        enable_kinesis_agent:
          packages:
            yum:
              aws-kinesis-agent: []
          files:
            /etc/aws-kinesis/agent.json:
              content: |
                {
                  "flows": [
                        {
                            "filePattern": "/var/log/cadabra/*.log",
                            "deliveryStream": "{{DS}}"
                        }
                  ]
                }
              context:
                DS: !Ref DeliveryStreamName
              mode: '000644'
              owner: root
              group: root
          commands:
            make_log_stream_dir:
              command: "sudo mkdir /var/log/cadabra"
          services:
            systemd:
              aws-kinesis-agent:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/aws-kinesis/agent.json"
                packages:
                  yum:
                    - "aws-kinesis-agent"
        enable_log_generator:
          files:
            /home/ec2-user/log_generator.py:
              content: !Sub |
                #!/usr/bin/env python3

                import argparse
                import datetime
                import time
                import json
                import random
                import signal

                class SignalHandler:
                    shutdown_requested = False

                    def __init__(self):
                        signal.signal(signal.SIGINT, self.request_shutdown)
                        signal.signal(signal.SIGTERM, self.request_shutdown)

                    def request_shutdown(self, *args):
                        print('Request to shutdown received, stopping')
                        self.shutdown_requested = True

                    def can_run(self):
                        return not self.shutdown_requested

                def get_random_data():
                  current_temperature = round(10 + random.random() * 170, 2)
                  if current_temperature > 160:
                      status = 'ERROR'
                  elif current_temperature > 140 or random.randrange(1, 100) > 80:
                      status = random.choice(['WARNING','ERROR'])
                  else:
                      status = 'OK'
                  return {
                      'sensor_id': random.randrange(1, 100),
                      'current_temperature': current_temperature,
                      'status': status,
                      'event_time': datetime.datetime.now().isoformat()
                  }
                
                def save_data(file_path, f_prefix, f_suffix, cnt_lines):
                  data_path = time.strftime(f"{file_path}/{f_prefix}_%Y%m%d-%H%M%S{f_suffix}")
                  with open(data_path, 'a') as data_file:
                    for line in range(cnt_lines):
                      data = get_random_data()
                      json.dump(data, data_file)
                      data_file.write('\n')
                
                if __name__ == '__main__':
                  parser = argparse.ArgumentParser()
                  parser.add_argument('file_path', help='path of the files to generate')
                  parser.add_argument('f_prefix', help='prefix of file names')
                  parser.add_argument('f_suffix', help='suffix of file names')
                  parser.add_argument('cnt_lines', help='amount of lines by file', type=int)
                  args = parser.parse_args()
                  signal_handler = SignalHandler()
                  while signal_handler.can_run():
                    save_data(args.file_path, args.f_prefix, args.f_suffix, args.cnt_lines)
                    time.sleep(random.uniform(2, 3))
              mode: '000555'
            /lib/systemd/system/log-generator.service:
              content: !Sub |
                [Unit]
                Description=Log generator service
                After=aws-kinesis-agent.service
                
                [Service]
                Type=simple
                Restart=always
                ExecStart=/usr/bin/python3 /home/ec2-user/log_generator.py /var/log/cadabra sensors_data .log 100
                
                [Install]
                WantedBy=multi-user.target
          commands:
            01_enable_log_generator:
              command: systemctl enable log-generator.service
            02_start_log_generator:
              command: systemctl start log-generator.service
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
  LnInstanceProfiler:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref LnDataProducerRole
  LnDataProducerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-data-producer-role-kds
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  LnKinesisPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Action:
              - "firehose:DeleteDeliveryStream"
              - "firehose:PutRecord"
              - "firehose:PutRecordBatch"
              - "firehose:UpdateDestination"
            Resource: !Sub
              - "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${DS}"
              - DS: !Ref DeliveryStreamName
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
            Resource: '*'
      PolicyName: !Sub ${AWS::StackName}-firehose-put-records-policy"
      Roles:
        - !Ref LnDataProducerRole

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt EC2Instance.AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
